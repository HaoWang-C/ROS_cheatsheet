/* This is an frame of a Client         	    */
/* Client      : Send the request               */
/* Service     : AddInts                        */
/* Srv file    : beginner_tutorials::AddTwoInts */


/* Basic Procedure */
/* 1. Include head files
   2. Initialize ROS node  
   3. Check the number of the input parameters
   4. Instantiate a node handler and creat an client object
   5. Instantiate an autogenerated service class(<name of the package>::<name of the srv file that used>), 
      and assign values into its request member.
	  A service class contains two members, request and response. 
	  It also contains two class definitions, Request and Response.
   6. Send the request
*/


// 1. Include head files
#include "ros/ros.h"
// <name of the package>/<name of the srv file that used>.h
#include "beginner_tutorials/AddTwoInts.h"

int main(int argc, char*argv[])
{
	// 2. Initialize ROS node (with the name of the node)
	ros::init(argc, argv, "add_two_ints_client");
	
	// 3. Check the number of the input parameter
	if (argc != 3)
    {
		ROS_INFO("usage: add_two_ints_client X Y");
		return 1;
    }
	
	// 4. Instantiate a node handler and creat an object
	ros::NodeHandle n;
	
	// Service: "AddInts" which is consistent with the service provided by server
	// Srv file: <name of the package>::<name of the srv file that used>
	ros::ServiceClient client = n.serviceClient<beginner_tutorials::AddTwoInts>("AddInts");
	
	
	// 5. Instantiate an autogenerated service class
	beginner_tutorials::AddTwoInts ai;
    ai.request.num1 = atoi(argv[1]);
    ai.request.num2 = atoi(argv[2]);
	
	// 6. Send the request
	// If success, process the response
	if (client.call(ai))
	{
		ROS_INFO("Sum: %ld", (long int)ai.response.sum);
	}
	else
	{
		ROS_ERROR("Failed to call service AddInts");
		return 1;
	}

  return 0;
}